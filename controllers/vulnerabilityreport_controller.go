package controllers

import (
	"context"

	"github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/metrics"
)

type PrometheusMetrics struct {
	vulnerabilityCounter *prometheus.GaugeVec
}

func NewPrometheusMetrics() *PrometheusMetrics {
	vulnerabilityCounter := promauto.NewGaugeVec(prometheus.GaugeOpts{
		Name: "vulnerabilityreport_vulnerabilities_count",
	}, []string{"repository", "tag", "severity", "name", "namespace"})

	metrics.Registry.MustRegister(vulnerabilityCounter)

	return &PrometheusMetrics{
		vulnerabilityCounter: vulnerabilityCounter,
	}
}

func (m *PrometheusMetrics) RegisterVulnerabilityReport(namespacedName types.NamespacedName, report *v1alpha1.VulnerabilityReport) {
	m.vulnerabilityCounter.
		WithLabelValues(report.Report.Artifact.Repository, report.Report.Artifact.Tag, "CRITICAL", namespacedName.Name, namespacedName.Namespace).
		Set(float64(report.Report.Summary.CriticalCount))
	m.vulnerabilityCounter.
		WithLabelValues(report.Report.Artifact.Repository, report.Report.Artifact.Tag, "HIGH", namespacedName.Name, namespacedName.Namespace).
		Set(float64(report.Report.Summary.HighCount))
	m.vulnerabilityCounter.
		WithLabelValues(report.Report.Artifact.Repository, report.Report.Artifact.Tag, "MEDIUM", namespacedName.Name, namespacedName.Namespace).
		Set(float64(report.Report.Summary.MediumCount))
	m.vulnerabilityCounter.
		WithLabelValues(report.Report.Artifact.Repository, report.Report.Artifact.Tag, "LOW", namespacedName.Name, namespacedName.Namespace).
		Set(float64(report.Report.Summary.LowCount))
	m.vulnerabilityCounter.
		WithLabelValues(report.Report.Artifact.Repository, report.Report.Artifact.Tag, "UNKNOWN", namespacedName.Name, namespacedName.Namespace).
		Set(float64(report.Report.Summary.UnknownCount))
}

// VulnerabilityReportReconciler reconciles a VulnerabilityReport object
type VulnerabilityReportReconciler struct {
	client.Client
	Scheme  *runtime.Scheme
	metrics *PrometheusMetrics
}

func NewVulnerabilityReportReconciler(client client.Client, scheme *runtime.Scheme) *VulnerabilityReportReconciler {
	return &VulnerabilityReportReconciler{
		Client:  client,
		Scheme:  scheme,
		metrics: NewPrometheusMetrics(),
	}
}

func (r *VulnerabilityReportReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	// logger := log.FromContext(ctx).WithValues("vulnerabilityreport", req.NamespacedName)
	obj := &v1alpha1.VulnerabilityReport{}
	err := r.Client.Get(ctx, req.NamespacedName, obj)
	if err != nil {
		if errors.IsNotFound(err) {
			// TODO: Should we remove the metric from the client?
			// To remove the metrics it is needed to store the labels used
			return ctrl.Result{}, nil
		}
		return ctrl.Result{}, err
	}

	r.metrics.RegisterVulnerabilityReport(req.NamespacedName, obj)

	return ctrl.Result{}, err
}

// SetupWithManager sets up the controller with the Manager.
func (r *VulnerabilityReportReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&v1alpha1.VulnerabilityReport{}).
		Complete(r)
}
